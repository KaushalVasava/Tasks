package com.lahsuak.apps.tasks.ui.adaptersimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.google.android.material.card.MaterialCardViewimport com.lahsuak.apps.tasks.data.model.Taskimport com.lahsuak.apps.tasks.databinding.TaskItemBindingimport com.lahsuak.apps.tasks.databinding.TaskItemGridBindingimport com.lahsuak.apps.tasks.ui.adapters.viewholders.TaskViewHolder1import com.lahsuak.apps.tasks.ui.adapters.viewholders.TaskViewHolder2import com.lahsuak.apps.tasks.util.SelectionListenerclass TaskAdapter(    private val listener: TaskListener,    private val selectionListener: SelectionListener,//    private val onClickListener: OnClickListener,) : ListAdapter<Task, RecyclerView.ViewHolder>(DiffCallback()) {    override fun onCreateViewHolder(parent: ViewGroup, viewType1: Int): RecyclerView.ViewHolder {        return if (!selectionListener.getViewType()) {            val layoutInflater = LayoutInflater.from(parent.context)            val binding = TaskItemBinding.inflate(layoutInflater, parent, false)            TaskViewHolder1(                this,                binding,                listener,                selectionListener,//                onClickListener            )        } else {            val binding =                TaskItemGridBinding.inflate(LayoutInflater.from(parent.context), parent, false)            TaskViewHolder2(                this,                binding,                listener,                selectionListener,//                onClickListener            )        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        val currentItem = getItem(position)        when (holder) {            is TaskViewHolder1 -> holder.bind(currentItem)            is TaskViewHolder2 -> holder.bind(currentItem)        }    }    class DiffCallback : DiffUtil.ItemCallback<Task>() {        override fun areItemsTheSame(oldItem: Task, newItem: Task) =            oldItem.id == newItem.id        override fun areContentsTheSame(oldItem: Task, newItem: Task) =            oldItem == newItem    }    interface TaskListener {        fun onItemClicked(task: Task, position: Int, cardView: MaterialCardView)        fun onDeleteClicked(task: Task, position: Int)        fun onCheckBoxClicked(task: Task, taskCompleted: Boolean)        fun onAnyItemLongClicked(position: Int)        fun getExpandCollapseState(position: Int): Boolean        fun setExpandCollapseState(position: Int, isExpanded: Boolean)    }//    class OnClickListener(val clickListener: (Task, MaterialCardView) -> Unit) {//        fun onClick(//            task: Task,//            cardView: MaterialCardView,//        ) = clickListener(task, cardView)//    }}