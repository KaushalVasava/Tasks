package com.lahsuak.apps.mytask.ui.adaptersimport android.view.LayoutInflaterimport android.view.ViewGroupimport androidx.recyclerview.widget.DiffUtilimport androidx.recyclerview.widget.ListAdapterimport androidx.recyclerview.widget.RecyclerViewimport com.lahsuak.apps.mytask.data.model.Taskimport com.lahsuak.apps.mytask.databinding.TaskItemBindingimport com.lahsuak.apps.mytask.databinding.TaskItemGridBindingimport com.lahsuak.apps.mytask.ui.adapters.viewholders.TaskViewHolder1import com.lahsuak.apps.mytask.ui.adapters.viewholders.TaskViewHolder2import com.lahsuak.apps.mytask.ui.fragments.TaskFragment.Companion.viewTypeclass TaskAdapter(    private val listener: TaskListener) :    ListAdapter<Task, RecyclerView.ViewHolder>(DiffCallback()) {    override fun onCreateViewHolder(parent: ViewGroup, viewType1: Int): RecyclerView.ViewHolder {        return if (!viewType) {            val layoutInflater = LayoutInflater.from(parent.context)            val binding = TaskItemBinding.inflate(layoutInflater, parent, false)            TaskViewHolder1(                this,                binding,                listener            )        } else {            val binding =                TaskItemGridBinding.inflate(LayoutInflater.from(parent.context), parent, false)            TaskViewHolder2(                this,                binding,                listener            )        }    }    override fun onBindViewHolder(holder: RecyclerView.ViewHolder, position: Int) {        val currentItem = getItem(position)        when (holder) {            is TaskViewHolder1 -> holder.bind(currentItem)            is TaskViewHolder2 -> holder.bind(currentItem)        }    }    class DiffCallback : DiffUtil.ItemCallback<Task>() {        override fun areItemsTheSame(oldItem: Task, newItem: Task) =            oldItem.id == newItem.id        override fun areContentsTheSame(oldItem: Task, newItem: Task) =            oldItem == newItem    }    interface TaskListener {        fun onItemClicked(task: Task, position: Int)        fun onDeleteClicked(task: Task, position: Int)        fun onCheckBoxClicked(task: Task, taskCompleted: Boolean)        fun onAnyItemLongClicked(position: Int)    }}